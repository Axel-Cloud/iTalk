{"version":3,"sources":["../src/Index.js"],"names":["require","config","App","httpServer","SocketIO","Server","cors","origin","process","setMaxListeners","set","env","Port","use","express","json","limit","on","Socket","UserID","join","Users","UpdateOnline","ID","Online","leave","ConversationID","EmitterID","RecieverID","Message","Conversations","NewMessage","listen","get","console","log"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;;;AAFA;AAIAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,GAAG,GAAG,uBAAZ;AACA,MAAMC,UAAU,GAAG,wBAAaD,GAAb,CAAnB;AACA,MAAME,QAAQ,GAAG,IAAIC,cAAJ,CAAWF,UAAX,EAAuB;AAAEG,EAAAA,IAAI,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV;AAAR,CAAvB,CAAjB;AAEA;;AACAC,OAAO,CAACC,eAAR,CAAwB,CAAxB;AACAP,GAAG,CAACQ,GAAJ,CAAQ,MAAR,EAAgBF,OAAO,CAACG,GAAR,CAAYC,IAAZ,IAAoB,IAApC;AAEA;;AACAV,GAAG,CAACW,GAAJ,CAAQ,oBAAR;AACAX,GAAG,CAACW,GAAJ,CAAQC,iBAAQC,IAAR,CAAa;AAACC,EAAAA,KAAK,EAAE;AAAR,CAAb,CAAR;AAEA;;AACAd,GAAG,CAACW,GAAJ,CAAQ,YAAR,EAAsBb,OAAO,CAAC,gBAAD,CAA7B;AACAE,GAAG,CAACW,GAAJ,CAAQ,mBAAR,EAA6Bb,OAAO,CAAC,uBAAD,CAApC,E,CAEA;;AACAI,QAAQ,CAACa,EAAT,CAAY,YAAZ,EAA2BC,MAAD,IAAY;AAClCA,EAAAA,MAAM,CAACD,EAAP,CAAU,SAAV,EAAsBE,MAAD,IAAY;AAC7BD,IAAAA,MAAM,CAACE,IAAP,CAAYD,MAAM,CAACA,MAAnB;;AACAE,mBAAMC,YAAN,CAAmB;AAACC,MAAAA,EAAE,EAAEJ,MAAM,CAACA,MAAZ;AAAoBK,MAAAA,MAAM,EAAE;AAA5B,KAAnB;AACH,GAHD;AAKAN,EAAAA,MAAM,CAACD,EAAP,CAAU,WAAV,EAAwBE,MAAD,IAAY;AAC/BD,IAAAA,MAAM,CAACO,KAAP,CAAaN,MAAM,CAACA,MAApB;;AACAE,mBAAMC,YAAN,CAAmB;AAACC,MAAAA,EAAE,EAAEJ,MAAM,CAACA,MAAZ;AAAoBK,MAAAA,MAAM,EAAE;AAA5B,KAAnB;AACH,GAHD;AAKAN,EAAAA,MAAM,CAACD,EAAP,CAAU,SAAV,EAAqB,QAAsD;AAAA,QAArD;AAACS,MAAAA,cAAD;AAAiBC,MAAAA,SAAjB;AAA4BC,MAAAA,UAA5B;AAAwCC,MAAAA;AAAxC,KAAqD;;AACvEC,0BAAcC,UAAd,CAAyB;AAACL,MAAAA,cAAD;AAAiBC,MAAAA,SAAjB;AAA4BC,MAAAA,UAA5B;AAAwCC,MAAAA;AAAxC,KAAzB,EAA2EzB,QAA3E;AACH,GAFD;AAGH,CAdD;AAgBA;;AACAD,UAAU,CAAC6B,MAAX,CAAkB9B,GAAG,CAAC+B,GAAJ,CAAQ,MAAR,CAAlB,EAAmC,MAAM;AACrCC,EAAAA,OAAO,CAACC,GAAR,0BAA8BjC,GAAG,CAAC+B,GAAJ,CAAQ,MAAR,CAA9B;AACH,CAFD","sourcesContent":["import express from \"express\";\r\nimport Cors from \"cors\";\r\nimport { createServer } from \"http\";\r\nimport { Server } from \"socket.io\";\r\nimport \"./Database/db\";\r\n\r\n//Controllers\r\nimport Users from \"./Database/Controllers/Users\";\r\nimport Conversations from \"./Database/Controllers/Conversation\";\r\n\r\nrequire('dotenv').config();\r\n\r\nconst App = express();\r\nconst httpServer = createServer(App);\r\nconst SocketIO = new Server(httpServer, { cors: { origin: '*' } });\r\n\r\n/* Server Settings */\r\nprocess.setMaxListeners(0)\r\nApp.set(\"Port\", process.env.Port || 3003);\r\n\r\n/* Middlewares */\r\nApp.use(Cors());\r\nApp.use(express.json({limit: '2mb'}));\r\n\r\n/* Server Routes */\r\nApp.use(\"/api/Users\", require(\"./Routes/Users\"));\r\nApp.use(\"/api/Conversation\", require(\"./Routes/Conversation\"));\r\n\r\n//SocketIO\r\nSocketIO.on(\"connection\", (Socket) => {\r\n    Socket.on(\"SetUser\", (UserID) => {\r\n        Socket.join(UserID.UserID);\r\n        Users.UpdateOnline({ID: UserID.UserID, Online: true});  \r\n    });\r\n\r\n    Socket.on(\"UnsetUser\", (UserID) => {\r\n        Socket.leave(UserID.UserID);\r\n        Users.UpdateOnline({ID: UserID.UserID, Online: false});\r\n    });\r\n\r\n    Socket.on(\"Message\", ({ConversationID, EmitterID, RecieverID, Message}) => {\r\n        Conversations.NewMessage({ConversationID, EmitterID, RecieverID, Message}, SocketIO);\r\n    });\r\n});\r\n\r\n/* Server Listen */\r\nhttpServer.listen(App.get(\"Port\"), () => {\r\n    console.log(`Listen on port ${App.get(\"Port\")}`);\r\n});"],"file":"Index.js"}